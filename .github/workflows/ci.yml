name: CI

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README'
      - 'COPYRIGHT'
      - 'LICENSE-*'
      - '**.md'
      - '**.txt'
  pull_request:
    paths-ignore:
      - 'README'
      - 'COPYRIGHT'
      - 'LICENSE-*'
      - '**.md'
      - '**.txt'

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -Dwarnings
  RUST_BACKTRACE: 1
  nightly: nightly
  stable: stable

jobs:
  # Check formatting
  rustfmt:
    name: rustfmt
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - name: Install Rust
      # --no-self-update is necessary because the windows environment cannot self-update rustup.exe.
      run: rustup update stable --no-self-update && rustup default stable
    - name: Check formatting
      run: cargo fmt --all -- --check


  # Apply clippy lints
  clippy:
    name: clippy
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - name: Install Rust
      # --no-self-update is necessary because the windows environment cannot self-update rustup.exe.
      run: rustup update stable --no-self-update && rustup default stable
    - name: Install cargo-hack
      run: cargo install cargo-hack
    - name: Apply clippy lints
      run: cargo hack clippy --each-feature

  # Run tests on some extra platforms
  cross:
    name: cross
    strategy:
      matrix:
        target:
          - aarch64-unknown-linux-gnu
          - aarch64-linux-android
          - aarch64-unknown-linux-musl
          - i686-linux-android
          - x86_64-linux-android
          - i686-pc-windows-gnu
          - x86_64-pc-windows-gnu
          - i686-unknown-linux-gnu
          - powerpc64-unknown-linux-gnu
          # - mips64-unknown-linux-gnuabi64
          - riscv64gc-unknown-linux-gnu
          - wasm32-unknown-unknown
          - wasm32-unknown-emscripten
          - wasm32-wasi
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cache cargo build and registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cross-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cross-
      - name: Install Rust
        run: rustup update stable && rustup default stable
      - name: cross build --target ${{ matrix.target }}
        run: |
          cargo install cross
          cross build --target ${{ matrix.target }}
        if: matrix.target != 'wasm32-unknown-unknown' && matrix.target != 'wasm32-wasi'
      # WASM support
      - name: cargo build --target ${{ matrix.target }}
        run: |
          rustup target add ${{ matrix.target }}
          cargo build --target ${{ matrix.target }}
        if: matrix.target == 'wasm32-unknown-unknown' || matrix.target == 'wasm32-wasi'
      # - name: cargo build --target ${{ matrix.target }}
      #   run: |
      #     rustup target add ${{ matrix.target }}
      #     cargo +nightly build --no-default-features --features alloc --target ${{ matrix.target }} -Z build-std=core,alloc
      #   if: matrix.target == 'mips64-unknown-linux-gnuabi64'

  build:
    name: build
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - name: Cache cargo build and registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-build-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-build-
    - name: Install Rust
      # --no-self-update is necessary because the windows environment cannot self-update rustup.exe.
      run: rustup update stable --no-self-update && rustup default stable
    - name: Install cargo-hack
      run: cargo install cargo-hack
    - name: Cache ~/.cargo
      uses: actions/cache@v4
      with:
        path: ~/.cargo
        key: ${{ runner.os }}-coverage-dotcargo
    - name: Run build
      run: cargo hack build --feature-powerset
  
  test:
    name: test
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - name: Cache cargo build and registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-test-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-test-
    - name: Install Rust
      # --no-self-update is necessary because the windows environment cannot self-update rustup.exe.
      run: rustup update stable --no-self-update && rustup default stable
    - name: Install cargo-hack
      run: cargo install cargo-hack
    - name: Cache ~/.cargo
      uses: actions/cache@v4
      with:
        path: ~/.cargo
        key: ${{ runner.os }}-coverage-dotcargo
    - name: Run test
      run: cargo hack test --feature-powerset 

  docs:
    name: docs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cache cargo build and registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ubuntu-latest-docs-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ubuntu-latest-docs-
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.nightly }}
          override: true
      - name: "doc --lib --all-features"
        run: cargo doc --lib --no-deps --all-features
        env:
          RUSTFLAGS: --cfg docsrs
          RUSTDOCFLAGS: --cfg docsrs -Dwarnings

  # coverage:
  #   name: coverage
  #   runs-on: ubuntu-latest
  #   needs:
  #     - rustfmt
  #     - clippy
  #     - build
  #     - cross
  #     - test
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Install latest nightly
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: nightly
  #         override: true
  #     - uses: actions-rs/install@v0.1
  #       with:
  #         crate: cargo-tarpaulin
  #         version: latest
  #     - name: Cache ~/.cargo
  #       uses: actions/cache@v4
  #       with:
  #         path: ~/.cargo
  #         key: ${{ runner.os }}-coverage-dotcargo
  #     - name: Cache cargo build
  #       uses: actions/cache@v4
  #       with:
  #         path: target
  #         key: ${{ runner.os }}-coverage-cargo-build-target
  #     - name: Run tarpaulin
  #       uses: actions-rs/cargo@v1
  #       with:
  #         command: tarpaulin
  #         args: --all-features --run-types tests --run-types doctests --workspace --out xml
  #     - name: Upload to codecov.io
  #       uses: codecov/codecov-action@v4
  #       with:
  #         token: ${{ secrets.CODECOV_TOKEN }}
  #         fail_ci_if_error: true
  #         slug: ${{ github.repository }}
